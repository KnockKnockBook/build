<head>
<style>

  .codehilite .hll { background-color: #ffffcc }
  .codehilite  { background: #f8f8f8; }
  .codehilite .c { color: #408080; font-style: italic } /* Comment */
  .codehilite .err { border: 1px solid #FF0000 } /* Error */
  .codehilite .k { color: #008000; font-weight: bold } /* Keyword */
  .codehilite .o { color: #666666 } /* Operator */
  .codehilite .ch { color: #408080; font-style: italic } /* Comment.Hashbang */
  .codehilite .cm { color: #408080; font-style: italic } /* Comment.Multiline */
  .codehilite .cp { color: #BC7A00 } /* Comment.Preproc */
  .codehilite .cpf { color: #408080; font-style: italic } /* Comment.PreprocFile */
  .codehilite .c1 { color: #408080; font-style: italic } /* Comment.Single */
  .codehilite .cs { color: #408080; font-style: italic } /* Comment.Special */
  .codehilite .gd { color: #A00000 } /* Generic.Deleted */
  .codehilite .ge { font-style: italic } /* Generic.Emph */
  .codehilite .gr { color: #FF0000 } /* Generic.Error */
  .codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */
  .codehilite .gi { color: #00A000 } /* Generic.Inserted */
  .codehilite .go { color: #888888 } /* Generic.Output */
  .codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
  .codehilite .gs { font-weight: bold } /* Generic.Strong */
  .codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
  .codehilite .gt { color: #0044DD } /* Generic.Traceback */
  .codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
  .codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
  .codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
  .codehilite .kp { color: #008000 } /* Keyword.Pseudo */
  .codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
  .codehilite .kt { color: #B00040 } /* Keyword.Type */
  .codehilite .m { color: #666666 } /* Literal.Number */
  .codehilite .s { color: #BA2121 } /* Literal.String */
  .codehilite .na { color: #7D9029 } /* Name.Attribute */
  .codehilite .nb { color: #008000 } /* Name.Builtin */
  .codehilite .nc { color: #0000FF; font-weight: bold } /* Name.Class */
  .codehilite .no { color: #880000 } /* Name.Constant */
  .codehilite .nd { color: #AA22FF } /* Name.Decorator */
  .codehilite .ni { color: #999999; font-weight: bold } /* Name.Entity */
  .codehilite .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
  .codehilite .nf { color: #0000FF } /* Name.Function */
  .codehilite .nl { color: #A0A000 } /* Name.Label */
  .codehilite .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
  .codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */
  .codehilite .nv { color: #19177C } /* Name.Variable */
  .codehilite .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
  .codehilite .w { color: #bbbbbb } /* Text.Whitespace */
  .codehilite .mb { color: #666666 } /* Literal.Number.Bin */
  .codehilite .mf { color: #666666 } /* Literal.Number.Float */
  .codehilite .mh { color: #666666 } /* Literal.Number.Hex */
  .codehilite .mi { color: #666666 } /* Literal.Number.Integer */
  .codehilite .mo { color: #666666 } /* Literal.Number.Oct */
  .codehilite .sa { color: #BA2121 } /* Literal.String.Affix */
  .codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */
  .codehilite .sc { color: #BA2121 } /* Literal.String.Char */
  .codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */
  .codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
  .codehilite .s2 { color: #BA2121 } /* Literal.String.Double */
  .codehilite .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
  .codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */
  .codehilite .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
  .codehilite .sx { color: #008000 } /* Literal.String.Other */
  .codehilite .sr { color: #BB6688 } /* Literal.String.Regex */
  .codehilite .s1 { color: #BA2121 } /* Literal.String.Single */
  .codehilite .ss { color: #19177C } /* Literal.String.Symbol */
  .codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */
  .codehilite .fm { color: #0000FF } /* Name.Function.Magic */
  .codehilite .vc { color: #19177C } /* Name.Variable.Class */
  .codehilite .vg { color: #19177C } /* Name.Variable.Global */
  .codehilite .vi { color: #19177C } /* Name.Variable.Instance */
  .codehilite .vm { color: #19177C } /* Name.Variable.Magic */
  .codehilite .il { color: #666666 } /* Literal.Number.Integer.Long */
</style>
</head>






<div>
 <ul>
<li>this is like an inbox for your useful code ideas</li>
</ul>
<h6>Turn a DF column into a list</h6>
<div class="codehilite"><pre><span></span><code><span class="n">df</span><span class="p">[</span><span class="s2">&quot;column_name&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
</code></pre></div>

<h6>Turn 2 DF columns into a dictionary</h6>
<div class="codehilite"><pre><span></span><code><span class="n">area_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">lakes</span><span class="o">.</span><span class="n">area</span><span class="p">,</span> <span class="n">lakes</span><span class="o">.</span><span class="n">count</span><span class="p">))</span>
</code></pre></div>

<h6>Calculate the amount of memory available</h6>
<div class="codehilite"><pre><span></span><code><span class="kn">import</span> <span class="nn">psutil</span>

<span class="c1"># Get a summary of available memory</span>
<span class="n">psutil</span><span class="o">.</span><span class="n">virtual_memory</span><span class="p">()</span>

<span class="c1"># save the data as a dict so you can access each element</span>
<span class="n">memory_dict_end</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">psutil</span><span class="o">.</span><span class="n">virtual_memory</span><span class="p">()</span><span class="o">.</span><span class="n">_asdict</span><span class="p">())</span>
</code></pre></div>

<h6>Delete DF from memory - useful for building data pipelines</h6>
<div class="codehilite"><pre><span></span><code><span class="k">def</span> <span class="nf">Delete_DF_Release_Memory</span><span class="p">(</span><span class="n">DF</span><span class="p">):</span>
    <span class="s2">&quot;Deletes a dataframe and releases it&#39;s memory.  If you load to many dataframes at one time in can use up all your memory and cause your pipeline program to crash.  This function addresses that by deleting dataframes from memory.&quot;</span>
    <span class="k">del</span> <span class="n">DF</span>
    <span class="n">gc</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
    <span class="n">DF</span><span class="o">=</span><span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">()</span>
    <span class="k">return</span><span class="p">(</span><span class="n">DF</span><span class="p">)</span>
</code></pre></div>

<h6>Calculate how much time it takes to do something</h6>
<div class="codehilite"><pre><span></span><code><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="c1"># take the time before the data processing starts</span>
<span class="n">start_time</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
<span class="n">start_time_datetime</span> <span class="o">=</span> <span class="n">start_time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%m/</span><span class="si">%d</span><span class="s2">/%Y %H:%M:%S&quot;</span><span class="p">)</span>

<span class="c1">##############################</span>
<span class="c1"># the thing you want to time #</span>
<span class="c1">##############################</span>

<span class="c1"># take the time after the processing</span>
<span class="n">end_time</span>          <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
<span class="n">end_time_datetime</span> <span class="o">=</span> <span class="n">end_time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%m/</span><span class="si">%d</span><span class="s2">/%Y %H:%M:%S&quot;</span><span class="p">)</span>


<span class="c1"># get the total runtime (before and after the data processing)</span>
<span class="n">runtime</span> <span class="o">=</span> <span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span> 
<span class="n">runtime_seconds</span> <span class="o">=</span> <span class="n">runtime</span><span class="o">.</span><span class="n">seconds</span>
</code></pre></div>

<h6>Use SQL to see how many rows are in a table</h6>
<div class="codehilite"><pre><span></span><code>    <span class="c1"># query the loaded table to see how many rows were loaded</span>
    <span class="n">sql_loaded_tbl</span> <span class="o">=</span> <span class="s1">&#39;SELECT count(*) row_count FROM </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">table_name_out</span><span class="p">)</span>
    <span class="n">DF_Loaded_tbl</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_sql</span><span class="p">(</span><span class="n">sql_loaded_tbl</span><span class="p">,</span>  <span class="n">DataMart_Connection</span><span class="p">)</span>
    <span class="n">total_rows_loaded</span> <span class="o">=</span> <span class="n">DF_Loaded_tbl</span><span class="p">[</span><span class="s1">&#39;row_count&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div>

<h3>get unique values in a column and sum up how frequently they occur</h3>
<p>```python</p>
<h1>get counts of number of times each value occurs</h1>
<p>DF[column].value_counts()</p>
<h1>get percent of times each value occurs</h1>
<p>DF[column].value_counts(normalize=True)</p>
<h1>use to identify rare categorical values</h1>
<div class="codehilite"><pre><span></span><code>### SELECT DISTINCT
###### drop dups across DF
````python 
# duo
DF.drop_duplicates()
</code></pre></div>

<h6>use one column to drop dups, and keep first occurance</h6>
<div class="codehilite"><pre><span></span><code><span class="n">DF</span><span class="p">[</span><span class="s1">&#39;column&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="s1">&#39;column&#39;</span><span class="p">,</span> <span class="n">keep</span><span class="o">=</span><span class="s1">&#39;first&#39;</span><span class="p">)</span>
</code></pre></div>

<h6>count number of duplicates</h6>
<div class="codehilite"><pre><span></span><code><span class="c1"># use len() and drop_dulicates() to count the number of dups</span>
<span class="nb">len</span><span class="p">(</span><span class="n">DF</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span> <span class="p">)</span>
</code></pre></div>

<h6>Modify columns with a function</h6>
<div class="codehilite"><pre><span></span><code><span class="c1"># create a function that returns a modified DF &#39;x&#39;</span>
<span class="k">def</span> <span class="nf">uppercase</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span>
<span class="c1"># apply the function to the DF</span>
<span class="c1"># and specify the columns to apply it to</span>
<span class="n">DF</span><span class="p">[</span><span class="s1">&#39;column&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">uppercase</span><span class="p">)</span>
</code></pre></div>
</div>





<div class="sidenav">

 

</div>